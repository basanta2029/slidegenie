version: '3.8'

services:
  # Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: slidegenie_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-slidegenie}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-slidegenie_password}
      POSTGRES_DB: ${POSTGRES_DB:-slidegenie}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./slidegenie-backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-slidegenie} -d ${POSTGRES_DB:-slidegenie}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - slidegenie_network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: slidegenie_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - slidegenie_network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: slidegenie_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - slidegenie_network

  # MinIO initialization
  minio-init:
    image: minio/mc:latest
    container_name: slidegenie_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      /usr/bin/mc mb --ignore-existing myminio/${MINIO_BUCKET_NAME:-slidegenie};
      /usr/bin/mc anonymous set download myminio/${MINIO_BUCKET_NAME:-slidegenie}/public;
      exit 0;
      "
    networks:
      - slidegenie_network

  # Backend API
  backend:
    build:
      context: ./slidegenie-backend
      dockerfile: Dockerfile
    container_name: slidegenie_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./slidegenie-backend/app:/app/app
      - ./slidegenie-backend/tests:/app/tests
      - ./slidegenie-backend/alembic:/app/alembic
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://frontend:3000"]
    env_file:
      - ./slidegenie-backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - slidegenie_network

  # Frontend
  frontend:
    build:
      context: ./slidegenie-frontend
      dockerfile: Dockerfile
    container_name: slidegenie_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://backend:8000/ws
    env_file:
      - ./slidegenie-frontend/.env.local
    depends_on:
      - backend
    networks:
      - slidegenie_network

  # Background Worker (Celery)
  worker:
    build:
      context: ./slidegenie-backend
      dockerfile: Dockerfile
    container_name: slidegenie_worker
    command: celery -A app.core.celery worker --loglevel=info
    volumes:
      - ./slidegenie-backend/app:/app/app
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - MINIO_ENDPOINT=minio:9000
    env_file:
      - ./slidegenie-backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - slidegenie_network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  slidegenie_network:
    driver: bridge