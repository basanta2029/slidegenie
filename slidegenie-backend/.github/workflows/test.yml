name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.0"
  POSTGRES_VERSION: "15"
  REDIS_VERSION: "7"

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run Black
        run: poetry run black --check app tests
      
      - name: Run isort
        run: poetry run isort --check-only app tests
      
      - name: Run Flake8
        run: poetry run flake8 app tests
      
      - name: Run mypy
        run: poetry run mypy app

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Bandit security linter
        uses: tj-actions/bandit@v5.1
        with:
          targets: |
            app/
            tests/
          options: "-r --format json --output bandit-report.json"
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run unit tests with coverage
        run: |
          poetry run pytest tests/unit \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unit
          name: unit-tests-${{ matrix.python-version }}
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-unit-${{ matrix.python-version }}
          path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: slidegenie
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: slidegenie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://slidegenie:testpass@localhost:5432/slidegenie_test
        run: |
          poetry run alembic upgrade head
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://slidegenie:testpass@localhost:5432/slidegenie_test
          REDIS_URL: redis://localhost:6379
          MINIO_ENDPOINT: localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          TESTING: true
        run: |
          poetry run pytest tests/integration \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: integration
          name: integration-tests

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: slidegenie
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: slidegenie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Build and start application
        env:
          DATABASE_URL: postgresql://slidegenie:testpass@localhost:5432/slidegenie_test
        run: |
          poetry run alembic upgrade head
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10  # Wait for server to start
      
      - name: Run E2E tests
        run: |
          poetry run pytest tests/e2e \
            --base-url=http://localhost:8000 \
            -v
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: tests/e2e/results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: |
          poetry install --no-interaction
          cd tests/performance && pip install -r requirements.txt
      
      - name: Run performance tests
        run: |
          cd tests/performance
          python run_tests.py --output-format=json --output-file=results.json
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/performance/results/
      
      - name: Comment PR with performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('tests/performance/results.json', 'utf8'));
            
            const comment = `## Performance Test Results
            
            | Metric | Value | Threshold | Status |
            |--------|-------|-----------|--------|
            | Average Response Time | ${results.avg_response_time}ms | <500ms | ${results.avg_response_time < 500 ? '✅' : '❌'} |
            | P95 Response Time | ${results.p95_response_time}ms | <1000ms | ${results.p95_response_time < 1000 ? '✅' : '❌'} |
            | Requests/Second | ${results.rps} | >100 | ${results.rps > 100 ? '✅' : '❌'} |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  ai-quality-tests:
    name: AI Quality Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[ai-quality]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --no-interaction
      
      - name: Run AI quality tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          poetry run pytest tests/ai_quality \
            --benchmark \
            --output-json=ai_quality_results.json \
            -v
      
      - name: Upload AI quality results
        uses: actions/upload-artifact@v4
        with:
          name: ai-quality-results
          path: ai_quality_results.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, security, unit-tests, integration-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate test summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check job statuses
            const jobStatuses = {
              lint: '${{ needs.lint.result }}',
              security: '${{ needs.security.result }}',
              'unit-tests': '${{ needs.unit-tests.result }}',
              'integration-tests': '${{ needs.integration-tests.result }}'
            };
            
            let summary = '# Test Suite Summary\n\n';
            summary += '| Job | Status |\n|-----|--------|\n';
            
            for (const [job, status] of Object.entries(jobStatuses)) {
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⏭️';
              summary += `| ${job} | ${emoji} ${status} |\n`;
            }
            
            // Write summary
            await core.summary
              .addRaw(summary)
              .write();