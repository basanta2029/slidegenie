name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linters
        run: |
          black --check .
          isort --check-only .
          flake8 .
          mypy app/

      - name: Security scan with Bandit
        run: bandit -r app/ -ll

      - name: Dependency vulnerability check
        run: |
          pip install safety
          safety check --json

      - name: SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/django
            p/flask
            p/owasp-top-ten

  # Unit and Integration Tests
  test:
    name: Tests
    needs: quality-checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [unit, integration, api]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: slidegenie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/slidegenie_test
          REDIS_URL: redis://localhost:6379
        run: |
          alembic upgrade head

      - name: Run ${{ matrix.test-suite }} tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/slidegenie_test
          REDIS_URL: redis://localhost:6379
          PYTHONPATH: ${{ github.workspace }}
        run: |
          if [ "${{ matrix.test-suite }}" = "unit" ]; then
            pytest tests/unit -v --cov=app --cov-report=xml
          elif [ "${{ matrix.test-suite }}" = "integration" ]; then
            pytest tests/integration -v --cov=app --cov-report=xml
          elif [ "${{ matrix.test-suite }}" = "api" ]; then
            pytest tests/api -v --cov=app --cov-report=xml
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev.slidegenie.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Development
        uses: ./.github/actions/deploy
        with:
          environment: development
          image-tag: ${{ needs.build.outputs.image-tag }}
          kube-config: ${{ secrets.DEV_KUBE_CONFIG }}
          deploy-key: ${{ secrets.DEV_DEPLOY_KEY }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.slidegenie.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run database migrations
        uses: ./.github/actions/migrate
        with:
          environment: staging
          database-url: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy to Staging (Blue-Green)
        uses: ./.github/actions/deploy-blue-green
        with:
          environment: staging
          image-tag: ${{ needs.build.outputs.image-tag }}
          kube-config: ${{ secrets.STAGING_KUBE_CONFIG }}
          deploy-key: ${{ secrets.STAGING_DEPLOY_KEY }}

      - name: Run smoke tests
        uses: ./.github/actions/smoke-tests
        with:
          environment: staging
          base-url: https://staging.slidegenie.app

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://slidegenie.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;

      - name: Backup database
        uses: ./.github/actions/database-backup
        with:
          environment: production
          database-url: ${{ secrets.PROD_DATABASE_URL }}
          backup-bucket: ${{ secrets.BACKUP_BUCKET }}

      - name: Run database migrations
        uses: ./.github/actions/migrate
        with:
          environment: production
          database-url: ${{ secrets.PROD_DATABASE_URL }}
          rollback-on-failure: true

      - name: Deploy to Production (Blue-Green)
        id: deploy
        uses: ./.github/actions/deploy-blue-green
        with:
          environment: production
          image-tag: ${{ needs.build.outputs.image-tag }}
          kube-config: ${{ secrets.PROD_KUBE_CONFIG }}
          deploy-key: ${{ secrets.PROD_DEPLOY_KEY }}
          canary-percentage: 10
          canary-duration: 10m

      - name: Run smoke tests
        uses: ./.github/actions/smoke-tests
        with:
          environment: production
          base-url: https://slidegenie.app

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}',
              environment_url: 'https://slidegenie.app',
              description: 'Deployment ${{ job.status }}'
            });

      - name: Notify deployment
        if: always()
        uses: ./.github/actions/notify
        with:
          status: ${{ job.status }}
          environment: production
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          pagerduty-token: ${{ secrets.PAGERDUTY_TOKEN }}

  # Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    needs: [deploy-production]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run E2E tests
        uses: ./.github/actions/e2e-tests
        with:
          base-url: https://slidegenie.app
          test-suite: production

      - name: Performance tests
        uses: ./.github/actions/performance-tests
        with:
          base-url: https://slidegenie.app
          threshold-file: performance-thresholds.json

      - name: Security scan
        uses: ./.github/actions/security-scan
        with:
          target-url: https://slidegenie.app
          scan-type: production

      - name: Update monitoring
        uses: ./.github/actions/update-monitoring
        with:
          environment: production
          datadog-api-key: ${{ secrets.DATADOG_API_KEY }}
          sentry-auth-token: ${{ secrets.SENTRY_AUTH_TOKEN }}