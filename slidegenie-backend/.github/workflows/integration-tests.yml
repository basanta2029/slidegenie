name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run integration tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: slidegenie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: test_access_key
          MINIO_ROOT_PASSWORD: test_secret_key
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9000:9000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry install --no-interaction

    - name: Initialize MinIO
      run: |
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        ./mc alias set myminio http://localhost:9000 test_access_key test_secret_key
        ./mc mb --ignore-existing myminio/slidegenie-test

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/slidegenie_test
      run: |
        poetry run alembic upgrade head

    - name: Run integration tests
      env:
        # Database
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: slidegenie_test
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/slidegenie_test
        
        # Redis
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        
        # MinIO
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: test_access_key
        MINIO_SECRET_KEY: test_secret_key
        MINIO_BUCKET_NAME: slidegenie-test
        MINIO_USE_SSL: false
        
        # Test environment
        ENVIRONMENT: test
        TESTING: true
        SECRET_KEY: test-secret-key-for-ci-testing
        
        # Mock services
        EMAIL_BACKEND: test
        RATE_LIMIT_ENABLED: false
        ANTHROPIC_API_KEY: ${{ secrets.TEST_ANTHROPIC_API_KEY || 'test-key' }}
        OPENAI_API_KEY: ${{ secrets.TEST_OPENAI_API_KEY || 'test-key' }}
        GOOGLE_CLIENT_ID: test-google-client
        GOOGLE_CLIENT_SECRET: test-google-secret
        MICROSOFT_CLIENT_ID: test-microsoft-client
        MICROSOFT_CLIENT_SECRET: test-microsoft-secret
      run: |
        poetry run pytest tests/integration -v -m integration \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=test-results/integration-tests.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-coverage

    - name: Report test summary
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Integration Test Results
        path: test-results/integration-tests.xml
        reporter: java-junit

  integration-tests-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run integration tests in Docker
      run: |
        docker-compose -f tests/integration/docker-compose.test.yml up \
          --abort-on-container-exit \
          --exit-code-from test-runner

    - name: Clean up
      if: always()
      run: |
        docker-compose -f tests/integration/docker-compose.test.yml down -v