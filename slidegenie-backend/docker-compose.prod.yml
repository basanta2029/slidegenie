# Production Docker Compose for SlideGenie
# ========================================
# Simplified production deployment with essential services only

version: '3.9'

services:
  # ==============================================
  # Database Services
  # ==============================================
  postgres:
    image: pgvector/pgvector:pg16
    container_name: slidegenie_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backups:/backups:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - slidegenie_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: slidegenie_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - slidegenie_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==============================================
  # Object Storage
  # ==============================================
  minio:
    image: minio/minio:latest
    container_name: slidegenie_minio_prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - slidegenie_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  minio-init:
    image: minio/mc:latest
    container_name: slidegenie_minio_init_prod
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-slidegenie}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
      /usr/bin/mc mb --ignore-existing myminio/$${MINIO_BUCKET_NAME};
      /usr/bin/mc anonymous set download myminio/$${MINIO_BUCKET_NAME}/public;
      exit 0;
      "
    networks:
      - slidegenie_network

  # ==============================================
  # Application Services
  # ==============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: slidegenie/backend:${TAG:-latest}
    container_name: slidegenie_app_prod
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-slidegenie}
      
      # Application
      APP_ENV: production
      DEBUG: false
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Security
      CORS_ORIGINS: ${CORS_ORIGINS}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      - app_logs:/app/logs:rw
      - app_uploads:/app/uploads:rw
      - app_exports:/app/exports:rw
      - app_temp:/app/temp:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - slidegenie_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ==============================================
  # Worker Services for Background Tasks
  # ==============================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: slidegenie/backend:${TAG:-latest}
    container_name: slidegenie_worker_prod
    restart: unless-stopped
    command: ["python", "-m", "app.workers.celery_worker"]
    environment:
      # Same environment as app
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-slidegenie}
      APP_ENV: production
      DEBUG: false
      SECRET_KEY: ${SECRET_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs:rw
      - app_uploads:/app/uploads:rw
      - app_exports:/app/exports:rw
      - app_temp:/app/temp:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - slidegenie_network
    healthcheck:
      test: ["CMD", "python", "-m", "app.workers.health_check"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

# ==============================================
# Volumes
# ==============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_exports:
    driver: local
  app_temp:
    driver: local

# ==============================================
# Networks
# ==============================================
networks:
  slidegenie_network:
    driver: bridge