from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN
import io
from PIL import Image

def create_presentation(slides_data, template="Modern Research"):
    """
    Create PowerPoint presentation from slides data
    """
    # Create a presentation object
    prs = Presentation()
    
    # Set slide size (16:9 aspect ratio)
    prs.slide_width = Inches(13.33)
    prs.slide_height = Inches(7.5)
    
    # Get slides data
    slides = slides_data.get('slides', [])
    presentation_title = slides_data.get('title', 'Presentation')
    
    # Create title slide
    title_slide_layout = prs.slide_layouts[0]  # Title slide layout
    title_slide = prs.slides.add_slide(title_slide_layout)
    
    # Set title and subtitle
    title_slide.shapes.title.text = presentation_title
    if title_slide.shapes.placeholders.__len__() > 1:
        title_slide.placeholders[1].text = "Generated by SlideGenie"
    
    # Style the title slide
    title_shape = title_slide.shapes.title
    title_shape.text_frame.paragraphs[0].font.size = Pt(44)
    title_shape.text_frame.paragraphs[0].font.bold = True
    title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(46, 125, 50)  # Green color
    
    # Get available images
    slide_images = slides_data.get('slide_images', [])
    image_lookup = {img['name']: img for img in slide_images} if slide_images else {}

    # Add content slides
    for slide_data in slides:
        # Check if slide should have an image
        suggested_image = slide_data.get('suggested_image', '')
        has_image = suggested_image and suggested_image in image_lookup
        
        if has_image:
            # Use layout with space for image (layout 5 - two content)
            slide_layout = prs.slide_layouts[5] if len(prs.slide_layouts) > 5 else prs.slide_layouts[1]
        else:
            # Use bullet slide layout
            slide_layout = prs.slide_layouts[1]  # Title and content layout
            
        slide = prs.slides.add_slide(slide_layout)
        
        # Set slide title
        slide_title = slide_data.get('title', 'Slide Title')
        slide.shapes.title.text = slide_title
        
        # Style slide title
        title_shape = slide.shapes.title
        title_shape.text_frame.paragraphs[0].font.size = Pt(32)
        title_shape.text_frame.paragraphs[0].font.bold = True
        title_shape.text_frame.paragraphs[0].font.color.rgb = RGBColor(33, 150, 243)  # Blue color
        
        # Add content
        content_placeholder = slide.placeholders[1]
        text_frame = content_placeholder.text_frame
        text_frame.clear()  # Clear existing text
        
        # Add bullet points
        content_items = slide_data.get('content', [])
        if isinstance(content_items, list):
            for i, item in enumerate(content_items):
                clean_item = str(item).strip()
                # Clean up formatting
                if clean_item.startswith('- '):
                    clean_item = clean_item[2:].strip()
                elif clean_item.startswith('â€¢ '):
                    clean_item = clean_item[2:].strip()
                
                if i == 0:
                    # First paragraph
                    p = text_frame.paragraphs[0]
                else:
                    # Add new paragraph
                    p = text_frame.add_paragraph()
                
                p.text = clean_item
                p.level = 0  # Top level bullet
                p.font.size = Pt(20)
                p.font.color.rgb = RGBColor(33, 33, 33)  # Dark gray
        else:
            # Single content item
            clean_item = str(content_items).strip()
            if clean_item.startswith('- '):
                clean_item = clean_item[2:].strip()
            text_frame.paragraphs[0].text = clean_item
            text_frame.paragraphs[0].font.size = Pt(20)
        
        # Add image if suggested and available
        if has_image:
            try:
                image_info = image_lookup[suggested_image]
                image_bytes = image_info['bytes']
                
                # Create image stream
                image_stream = io.BytesIO(image_bytes)
                
                # Add image to slide
                # Position image on the right side of the slide
                left = Inches(7)  # Right side
                top = Inches(1.5)
                width = Inches(5)  # Adjust based on content
                height = Inches(4)
                
                slide.shapes.add_picture(image_stream, left, top, width, height)
                
            except Exception as e:
                print(f"Error adding image {suggested_image}: {str(e)}")
        
        # Add speaker notes
        notes_slide = slide.notes_slide
        notes_text_frame = notes_slide.notes_text_frame
        speaker_notes = slide_data.get('notes', '')
        if speaker_notes:
            notes_text_frame.text = f"Speaker Notes:\n{speaker_notes}"
    
    return prs

def create_pptx_buffer(slides_data, template="Modern Research"):
    """
    Create PowerPoint presentation and return as BytesIO buffer
    """
    # Generate the presentation
    prs = create_presentation(slides_data, template)
    
    # Save to BytesIO buffer
    buffer = io.BytesIO()
    prs.save(buffer)
    buffer.seek(0)
    
    return buffer 